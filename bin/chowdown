#!/usr/bin/env ruby

require 'getoptlong'
require 'pathname'

opts = GetoptLong.new(
  [ '--help',   '-h', GetoptLong::NO_ARGUMENT ],
  [ '--recipe', '-r', GetoptLong::REQUIRED_ARGUMENT ]
)

def showhelp
  puts <<-EOF
chowdown OPTION NAME

-h, --help:
show help

--recipe NAME, -r NAME:
create new recipe

NAME
The name of the page you want to create: 'My Fabulous Recipe'
  EOF
end

class Template
  @@template = 'recipe.template'

  def initialize(title = 'Autogenerated Example')
    @title = title
  end

  def targetpath
    @targetpath ||= Pathname('.')
  end

  def filename
    Pathname(
        @title.gsub(/[[:space:]]/, '-')
            .gsub(/[^[:alnum:]-]/, '')
            .downcase + '.md'
      )
  end

  def file_exists?
    new_path.exist?
  end

  def new_path
    targetpath.join(filename)
  end

  def template_path
    Pathname('./bin').join(@@template)
  end

  def create!
    new_contents = template_path.read
    new_contents['{TITLE}'] = @title
    new_contents['{IMAGENAME}'] = filename.sub_ext('.jpg').to_s

    if new_path.exist?
      puts "\nThat one already exists, try another name."
      puts "Tried to create: #{new_path}"
    else
      new_path.open('w+') {|file| file.write(new_contents) }

      puts "Created: #{new_path}\n  Use the same naming structure for any images.\n  eg: 'images/#{filename.basename.sub_ext('.jpg')}'"
    end

  end
end

# Recipe template
class Recipe < Template
  def targetpath
    @targetpath ||= Pathname('_recipes')
  end
end


opts.each do |opt, arg|
  case opt
  when '--help'
    showhelp()
  when '--recipe'
    Recipe.new(arg).create!
  end
end
