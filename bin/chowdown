#!/usr/bin/env ruby

require 'pathname'

REGISTRY = {}

class Options
  def initialize(action, target, name)
    available_actions = {new: 'build', delete: 'destroy'}
    @action = available_actions.fetch(action.to_sym, 'build')
    @target = target
    @name   = name
  end

  def self.parse(opts)
    action = opts.shift
    target = opts.shift
    name   = opts.shift
    self.new(action, target, name)
  end

  def execute
    puts "Chowdown..."
    template
      .new(@name)
      .send(@action)
  end

  def template
    Template.lookup(@target.to_sym)
  end
end


class Template
  @@template = 'recipe.template'

  def initialize(title = 'Example')
    @title = title
  end

  def targetpath
    @targetpath ||= Pathname('.')
  end

  def filename
    Pathname(
        @title.gsub(/[[:space:]]/, '-')
            .gsub(/[^[:alnum:]-]/, '')
            .downcase + '.md'
      )
  end

  def file_exists?
    new_path.exist?
  end

  def new_path
    targetpath.join(filename)
  end

  def template_path
    Pathname('./bin').join(@@template)
  end

  def build
    new_contents = template_path.read
    new_contents['{TITLE}'] = @title
    new_contents['{IMAGENAME}'] = filename.sub_ext('.jpg').to_s

    if new_path.exist?
      puts "\nThat one already exists, try another name."
      puts "Tried to create: #{new_path}"
    else
      new_path.open('w+') {|file| file.write(new_contents) }

      puts "Created: #{new_path}\n  Use the same naming structure for any images.\n  eg: 'images/#{filename.basename.sub_ext('.jpg')}'"
    end
  end

  def destroy
    if new_path.exist?
      new_path.delete
      puts "Deleting: #{new_path}"
    else
      puts "Can't delete: #{new_path}\nIt does not exist."
    end
  end

  def method_missing(m, *args, &block)
    puts 'Usage:'
    puts " #{Pathname(__FILE__).basename} ACTION PAGE NAME"
    puts " ACTION is one of: new, delete"
    puts " PAGE is one of: #{REGISTRY.keys.join(', ')}"
    puts " TITLE is the title of the page you are creating."
    puts "eg:\n chowdown new recipe 'Grandma\'s Cookies'"
  end

  def self.register(name, klass)
    REGISTRY[name] = klass
  end
  def self.lookup(name)
    REGISTRY[name]
  end
end

# NullTemplate
class NullTemplate < Template
  def build; err(:build); end
  def destroy; err(:destroy); end
end
REGISTRY.default = NullTemplate


# Recipe template
class Recipe < Template
  def targetpath
    @targetpath ||= Pathname('_recipes')
  end
end
Template.register(:recipe, Recipe)




options = Options.parse(ARGV)
options.execute
